name: Basic Workflow develop

on:
    push:
        branches:
            - main

env:
    DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/api-session13

jobs:
    run-unit-test-job:
        runs-on: ubuntu-latest
        steps:
            - name: Clone Source Code to runner
              uses: actions/checkout@v5

            # - name: intall dependencies
            #   run: npm i

            # - name: run unit test
            #   run: npm run test
      
    sonarqube-code-quality-scan-job:
        runs-on: ubuntu-latest
        needs: run-unit-test-job
        steps:
          - name: Clone Source Code
            uses: actions/checkout@v4

          - name: Install dependencies
            run: npm install

          - name: SonarQube Scan
            uses: sonarsource/sonarqube-scan-action@master
            env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    snyk-code-security-scan-job:
        runs-on: ubuntu-latest
        needs: run-unit-test-job
        steps:

          - name: Checkout Code
            uses: actions/checkout@v4

          - name: Set up Node.js (if applicable)
            uses: actions/setup-node@v3
            with:
              node-version: '18'

          - name: Install Dependency Scanning Tool (Snyk)
            run: npm install -g snyk

          - name: Snyk Authentication
            run: snyk auth ${{ secrets.SNYK_TOKEN }}

          - name: Run Snyk Vulnerability Scan and Capture Output
            id: snyk-test
            run: |
              # Run snyk test and capture output
              TEST_OUTPUT=$(snyk test --all-projects --json 2>&1 || true)
              echo "test_output=$TEST_OUTPUT" >> $GITHUB_OUTPUT
              
              # Extract the monitor URL from the output (if available)
              MONITOR_URL=$(echo "$TEST_OUTPUT" | grep -o '"uri":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
              echo "monitor_url=$MONITOR_URL" >> $GITHUB_OUTPUT
              
              # Exit with failure if vulnerabilities found (non-zero exit code)
              snyk test --all-projects

          - name: Run Snyk Monitor
            run: snyk monitor --all-projects --org=talel12

          - name: Notify Slack on Success
            if: success()
            uses: slackapi/slack-github-action@v1.23.0
            with:
              payload: |
                {
                  "text": "‚úÖ *Snyk Security Scan Successful* ‚úÖ\nüîÅ Branch: `${{ github.ref_name }}`\nüèó Build: `${{ github.run_number }}`\nüîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                }
            env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

          - name: Notify Slack on Failure
            if: failure()
            uses: slackapi/slack-github-action@v1.23.0
            with:
              payload: |
                {
                  "text": "‚ùå *Snyk Security Scan Failed for Backend-api* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](https://app.snyk.io/org/talel12/projects)"
                }
            env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
                    

    build-docker-image-and-push:
        runs-on: ubuntu-latest
        needs: [ sonarqube-code-quality-scan-job, snyk-code-security-scan-job ]
        steps:
            - name: Clone Source Code to runner
              uses: actions/checkout@v5

            - name: build docker image
              run: docker build -t ${{ env.DOCKER_IMAGE }} .

            - name: tag docker image with version
              run: docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}
              
            - run: docker images

            - run: echo ${{ vars.DOCKERHUB_USERNAME }}
            - run: echo ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Push Docker image
              run: docker push ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}

            - name: push docker image latest
              run: docker push ${{ env.DOCKER_IMAGE }}:latest

    deploy-to-vps:
        runs-on: ubuntu-latest
        needs: build-docker-image-and-push
        steps:
            - name: Execute remote SSH commands using password
              uses: appleboy/ssh-action@v1
              with:
                host: ${{ secrets.VPS_HOST }}
                username: user
                password: ${{ secrets.VPS_PASSWORD }}
                script: |
                  cd /home/user/devops-script/backend-api/dev
                  sudo docker compose pull api
                  sudo docker compose up -d --force-recreate --remove-orphans api